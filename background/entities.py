
#--------------------
#
# Entity Metrics
#
#--------------------
METRIC_ENTITIES = [
    {
        "name": "campaign_metrics",
        "query": """
            SELECT
              campaign.id,
              campaign.name,
              segments.date,
              customer.id,
              metrics.clicks,
              metrics.impressions,
              metrics.ctr,
              metrics.interactions,
              metrics.interaction_rate,
              metrics.average_cpc,
              metrics.average_cpe,
              metrics.average_cpm,
              metrics.average_cpv,
              metrics.average_cost,
              metrics.all_conversions,
              metrics.all_conversions_value,
              metrics.cost_per_all_conversions,
              metrics.value_per_all_conversions,
              metrics.cost_micros,
              metrics.revenue_micros,
              metrics.view_through_conversions,
              metrics.video_quartile_p100_rate,
              metrics.video_quartile_p25_rate,
              metrics.video_quartile_p50_rate,
              metrics.video_quartile_p75_rate,
              metrics.video_view_rate,
              metrics.video_views,
              metrics.phone_calls,
              metrics.phone_impressions,
              metrics.phone_through_rate,
              metrics.invalid_click_rate,
              metrics.invalid_clicks,
              metrics.search_absolute_top_impression_share,
              metrics.search_budget_lost_absolute_top_impression_share,
              metrics.search_budget_lost_impression_share,
              metrics.search_budget_lost_top_impression_share,
              metrics.search_click_share,
              metrics.search_exact_match_impression_share,
              metrics.search_impression_share,
              metrics.search_rank_lost_absolute_top_impression_share,
              metrics.search_rank_lost_impression_share,
              metrics.search_rank_lost_top_impression_share,
              metrics.search_top_impression_share
            FROM campaign
            WHERE segments.date DURING YESTERDAY
        """,
        "table": "campaign_metrics",
        "insert_sql": """
            INSERT INTO campaign_metrics (
              date, user_id, customer_id, campaign_id, clicks, impressions, ctr,
              interactions, interaction_rate, average_cpc, average_cpa, average_cpm,
              average_cpv, average_cost, all_conversions, all_conversions_value,
              cost_per_all_conversions, value_per_all_conversions, cost, revenue,
              view_through_conversions, video_quartile_100_rate, video_quartile_25_rate,
              video_quartile_50_rate, video_quartile_75_rate, video_view_rate, video_views,
              phone_calls, phone_impressions, phone_through_rate, invalid_click_rate,
              invalid_clicks, search_absolute_top_impression_share,
              search_budget_lost_absolute_top_impression_share, search_budget_lost_impression_share,
              search_budget_lost_top_impression_share, search_click_share,
              search_rank_exact_match_impression_share, search_impression_share,
              search_rank_lost_absolute_top_impression_share, search_rank_lost_impression_share,
              search_rank_lost_top_impression_share, search_top_impression_share
            ) VALUES (
              %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,
              %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s
            )
            ON CONFLICT (customer_id, campaign_id, date) DO UPDATE
            SET clicks = EXCLUDED.clicks,
                impressions = EXCLUDED.impressions,
                ctr = EXCLUDED.ctr,
                interactions = EXCLUDED.interactions,
                interaction_rate = EXCLUDED.interaction_rate,
                average_cpc = EXCLUDED.average_cpc,
                average_cpa = EXCLUDED.average_cpa,
                average_cpm = EXCLUDED.average_cpm,
                average_cpv = EXCLUDED.average_cpv,
                average_cost = EXCLUDED.average_cost,
                all_conversions = EXCLUDED.all_conversions,
                all_conversions_value = EXCLUDED.all_conversions_value,
                cost_per_all_conversions = EXCLUDED.cost_per_all_conversions,
                value_per_all_conversions = EXCLUDED.value_per_all_conversions,
                cost = EXCLUDED.cost,
                revenue = EXCLUDED.revenue,
                view_through_conversions = EXCLUDED.view_through_conversions,
                video_quartile_100_rate = EXCLUDED.video_quartile_100_rate,
                video_quartile_25_rate = EXCLUDED.video_quartile_25_rate,
                video_quartile_50_rate = EXCLUDED.video_quartile_50_rate,
                video_quartile_75_rate = EXCLUDED.video_quartile_75_rate,
                video_view_rate = EXCLUDED.video_view_rate,
                video_views = EXCLUDED.video_views,
                phone_calls = EXCLUDED.phone_calls,
                phone_impressions = EXCLUDED.phone_impressions,
                phone_through_rate = EXCLUDED.phone_through_rate,
                invalid_click_rate = EXCLUDED.invalid_click_rate,
                invalid_clicks = EXCLUDED.invalid_clicks,
                search_absolute_top_impression_share = EXCLUDED.search_absolute_top_impression_share,
                search_budget_lost_absolute_top_impression_share = EXCLUDED.search_budget_lost_absolute_top_impression_share,
                search_budget_lost_impression_share = EXCLUDED.search_budget_lost_impression_share,
                search_budget_lost_top_impression_share = EXCLUDED.search_budget_lost_top_impression_share,
                search_click_share = EXCLUDED.search_click_share,
                search_rank_exact_match_impression_share = EXCLUDED.search_rank_exact_match_impression_share,
                search_impression_share = EXCLUDED.search_impression_share,
                search_rank_lost_absolute_top_impression_share = EXCLUDED.search_rank_lost_absolute_top_impression_share,
                search_rank_lost_impression_share = EXCLUDED.search_rank_lost_impression_share,
                search_rank_lost_top_impression_share = EXCLUDED.search_rank_lost_top_impression_share,
                search_top_impression_share = EXCLUDED.search_top_impression_share;
        """,
        "extract_fields": lambda row: (
            row.segments.date,
            None,  # user_id - you'll need to set this based on your logic
            row.customer.id,
            row.campaign.id,
            getattr(row.metrics, 'clicks', None),
            getattr(row.metrics, 'impressions', None),
            getattr(row.metrics, 'ctr', None),
            getattr(row.metrics, 'interactions', None),
            getattr(row.metrics, 'interaction_rate', None),
            getattr(row.metrics, 'average_cpc', None),
            getattr(row.metrics, 'average_cpe', None),
            getattr(row.metrics, 'average_cpm', None),
            getattr(row.metrics, 'average_cpv', None),
            getattr(row.metrics, 'average_cost', None),
            getattr(row.metrics, 'all_conversions', None),
            getattr(row.metrics, 'all_conversions_value', None),
            getattr(row.metrics, 'cost_per_all_conversions', None),
            getattr(row.metrics, 'value_per_all_conversions', None),
            getattr(row.metrics, 'cost_micros', None),
            getattr(row.metrics, 'revenue_micros', None),
            getattr(row.metrics, 'view_through_conversions', None),
            getattr(row.metrics, 'video_quartile_p100_rate', None),
            getattr(row.metrics, 'video_quartile_p25_rate', None),
            getattr(row.metrics, 'video_quartile_p50_rate', None),
            getattr(row.metrics, 'video_quartile_p75_rate', None),
            getattr(row.metrics, 'video_view_rate', None),
            getattr(row.metrics, 'video_views', None),
            getattr(row.metrics, 'phone_calls', None),
            getattr(row.metrics, 'phone_impressions', None),
            getattr(row.metrics, 'phone_through_rate', None),
            getattr(row.metrics, 'invalid_click_rate', None),
            getattr(row.metrics, 'invalid_clicks', None),
            getattr(row.metrics, 'search_absolute_top_impression_share', None),
            getattr(row.metrics, 'search_budget_lost_absolute_top_impression_share', None),
            getattr(row.metrics, 'search_budget_lost_impression_share', None),
            getattr(row.metrics, 'search_budget_lost_top_impression_share', None),
            getattr(row.metrics, 'search_click_share', None),
            getattr(row.metrics, 'search_exact_match_impression_share', None),
            getattr(row.metrics, 'search_impression_share', None),
            getattr(row.metrics, 'search_rank_lost_absolute_top_impression_share', None),
            getattr(row.metrics, 'search_rank_lost_impression_share', None),
            getattr(row.metrics, 'search_rank_lost_top_impression_share', None),
            getattr(row.metrics, 'search_top_impression_share', None),
        )
    },
    {
        "name": "ad_metrics",
        "query": """
            SELECT
              ad_group_ad.ad.id,
              ad_group.id,
              campaign.id,
              segments.date,
              customer.id,
              metrics.clicks,
              metrics.impressions,
              metrics.ctr,
              metrics.interactions,
              metrics.interaction_rate,
              metrics.average_cpc,
              metrics.average_cpe,
              metrics.average_cpm,
              metrics.average_cpv,
              metrics.average_cost,
              metrics.all_conversions,
              metrics.all_conversions_value,
              metrics.cost_per_all_conversions,
              metrics.value_per_all_conversions,
              metrics.cost_micros,
              metrics.revenue_micros,
              metrics.view_through_conversions,
              metrics.video_quartile_p100_rate,
              metrics.video_quartile_p25_rate,
              metrics.video_quartile_p50_rate,
              metrics.video_quartile_p75_rate,
              metrics.video_view_rate,
              metrics.video_views
            FROM ad_group_ad
            WHERE segments.date DURING YESTERDAY
        """,
        "table": "ad_metrics",
        "insert_sql": """
            INSERT INTO ad_metrics (
              date, user_id, customer_id, campaign_id, adgroup_id, ad_id, clicks, impressions, ctr,
              interactions, interaction_rate, average_cpc, average_cpa, average_cpm,
              average_cpv, average_cost, all_conversions, all_conversions_value,
              cost_per_all_conversions, value_per_all_conversions, cost, revenue,
              view_through_conversions, video_quartile_100_rate, video_quartile_25_rate,
              video_quartile_50_rate, video_quartile_75_rate, video_view_rate, video_views
            ) VALUES (
              %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,
              %s, %s, %s, %s, %s, %s, %s, %s, %s
            )
            ON CONFLICT (customer_id, campaign_id, adgroup_id, ad_id, date) DO UPDATE
            SET clicks = EXCLUDED.clicks,
                impressions = EXCLUDED.impressions,
                ctr = EXCLUDED.ctr,
                interactions = EXCLUDED.interactions,
                interaction_rate = EXCLUDED.interaction_rate,
                average_cpc = EXCLUDED.average_cpc,
                average_cpa = EXCLUDED.average_cpa,
                average_cpm = EXCLUDED.average_cpm,
                average_cpv = EXCLUDED.average_cpv,
                average_cost = EXCLUDED.average_cost,
                all_conversions = EXCLUDED.all_conversions,
                all_conversions_value = EXCLUDED.all_conversions_value,
                cost_per_all_conversions = EXCLUDED.cost_per_all_conversions,
                value_per_all_conversions = EXCLUDED.value_per_all_conversions,
                cost = EXCLUDED.cost,
                revenue = EXCLUDED.revenue,
                view_through_conversions = EXCLUDED.view_through_conversions,
                video_quartile_100_rate = EXCLUDED.video_quartile_100_rate,
                video_quartile_25_rate = EXCLUDED.video_quartile_25_rate,
                video_quartile_50_rate = EXCLUDED.video_quartile_50_rate,
                video_quartile_75_rate = EXCLUDED.video_quartile_75_rate,
                video_view_rate = EXCLUDED.video_view_rate,
                video_views = EXCLUDED.video_views;
        """,
        "extract_fields": lambda row: (
            row.segments.date,
            None,  # user_id - you'll need to set this based on your logic
            row.customer.id,
            row.campaign.id,
            row.ad_group.id,
            row.ad_group_ad.ad.id,
            getattr(row.metrics, 'clicks', None),
            getattr(row.metrics, 'impressions', None),
            getattr(row.metrics, 'ctr', None),
            getattr(row.metrics, 'interactions', None),
            getattr(row.metrics, 'interaction_rate', None),
            getattr(row.metrics, 'average_cpc', None),
            getattr(row.metrics, 'average_cpe', None),
            getattr(row.metrics, 'average_cpm', None),
            getattr(row.metrics, 'average_cpv', None),
            getattr(row.metrics, 'average_cost', None),
            getattr(row.metrics, 'all_conversions', None),
            getattr(row.metrics, 'all_conversions_value', None),
            getattr(row.metrics, 'cost_per_all_conversions', None),
            getattr(row.metrics, 'value_per_all_conversions', None),
            getattr(row.metrics, 'cost_micros', None),
            getattr(row.metrics, 'revenue_micros', None),
            getattr(row.metrics, 'view_through_conversions', None),
            getattr(row.metrics, 'video_quartile_p100_rate', None),
            getattr(row.metrics, 'video_quartile_p25_rate', None),
            getattr(row.metrics, 'video_quartile_p50_rate', None),
            getattr(row.metrics, 'video_quartile_p75_rate', None),
            getattr(row.metrics, 'video_view_rate', None),
            getattr(row.metrics, 'video_views', None),
        )
    },
    {
        "name": "adgroup_metrics",
        "query": """
            SELECT
              ad_group.id,
              campaign.id,
              segments.date,
              customer.id,
              metrics.clicks,
              metrics.impressions,
              metrics.ctr,
              metrics.interactions,
              metrics.interaction_rate,
              metrics.average_cpc,
              metrics.average_cpe,
              metrics.average_cpm,
              metrics.average_cpv,
              metrics.average_cost,
              metrics.all_conversions,
              metrics.all_conversions_value,
              metrics.cost_per_all_conversions,
              metrics.value_per_all_conversions,
              metrics.cost_micros,
              metrics.revenue_micros,
              metrics.view_through_conversions,
              metrics.video_quartile_p100_rate,
              metrics.video_quartile_p25_rate,
              metrics.video_quartile_p50_rate,
              metrics.video_quartile_p75_rate,
              metrics.video_view_rate,
              metrics.video_views,
              metrics.phone_calls,
              metrics.phone_impressions,
              metrics.phone_through_rate,
              metrics.search_absolute_top_impression_share,
              metrics.search_budget_lost_absolute_top_impression_share,
              metrics.search_budget_lost_top_impression_share,
              metrics.search_exact_match_impression_share,
              metrics.search_impression_share,
              metrics.search_rank_lost_absolute_top_impression_share,
              metrics.search_rank_lost_impression_share,
              metrics.search_rank_lost_top_impression_share,
              metrics.search_top_impression_share
            FROM ad_group
            WHERE segments.date DURING YESTERDAY
        """,
        "table": "adgroup_metrics",
        "insert_sql": """
            INSERT INTO adgroup_metrics (
              date, user_id, customer_id, campaign_id, adgroup_id, clicks, impressions, ctr,
              interactions, interaction_rate, average_cpc, average_cpa, average_cpm,
              average_cpv, average_cost, all_conversions, all_conversions_value,
              cost_per_all_conversions, value_per_all_conversions, cost, revenue,
              view_through_conversions, video_quartile_100_rate, video_quartile_25_rate,
              video_quartile_50_rate, video_quartile_75_rate, video_view_rate, video_views,
              phone_calls, phone_impressions, phone_through_rate,
              search_absolute_top_impression_share, search_budget_lost_absolute_top_impression_share,
              search_budget_lost_top_impression_share, search_exact_match_impression_share,
              search_impression_share, search_rank_lost_absolute_top_impression_share,
              search_rank_lost_impression_share, search_rank_lost_top_impression_share,
              search_top_impression_share
            ) VALUES (
              %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,
              %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s
            )
            ON CONFLICT (customer_id, campaign_id, adgroup_id, date) DO UPDATE
            SET clicks = EXCLUDED.clicks,
                impressions = EXCLUDED.impressions,
                ctr = EXCLUDED.ctr,
                interactions = EXCLUDED.interactions,
                interaction_rate = EXCLUDED.interaction_rate,
                average_cpc = EXCLUDED.average_cpc,
                average_cpa = EXCLUDED.average_cpa,
                average_cpm = EXCLUDED.average_cpm,
                average_cpv = EXCLUDED.average_cpv,
                average_cost = EXCLUDED.average_cost,
                all_conversions = EXCLUDED.all_conversions,
                all_conversions_value = EXCLUDED.all_conversions_value,
                cost_per_all_conversions = EXCLUDED.cost_per_all_conversions,
                value_per_all_conversions = EXCLUDED.value_per_all_conversions,
                cost = EXCLUDED.cost,
                revenue = EXCLUDED.revenue,
                view_through_conversions = EXCLUDED.view_through_conversions,
                video_quartile_100_rate = EXCLUDED.video_quartile_100_rate,
                video_quartile_25_rate = EXCLUDED.video_quartile_25_rate,
                video_quartile_50_rate = EXCLUDED.video_quartile_50_rate,
                video_quartile_75_rate = EXCLUDED.video_quartile_75_rate,
                video_view_rate = EXCLUDED.video_view_rate,
                video_views = EXCLUDED.video_views,
                phone_calls = EXCLUDED.phone_calls,
                phone_impressions = EXCLUDED.phone_impressions,
                phone_through_rate = EXCLUDED.phone_through_rate,
                search_absolute_top_impression_share = EXCLUDED.search_absolute_top_impression_share,
                search_budget_lost_absolute_top_impression_share = EXCLUDED.search_budget_lost_absolute_top_impression_share,
                search_budget_lost_top_impression_share = EXCLUDED.search_budget_lost_top_impression_share,
                search_exact_match_impression_share = EXCLUDED.search_exact_match_impression_share,
                search_impression_share = EXCLUDED.search_impression_share,
                search_rank_lost_absolute_top_impression_share = EXCLUDED.search_rank_lost_absolute_top_impression_share,
                search_rank_lost_impression_share = EXCLUDED.search_rank_lost_impression_share,
                search_rank_lost_top_impression_share = EXCLUDED.search_rank_lost_top_impression_share,
                search_top_impression_share = EXCLUDED.search_top_impression_share;
        """,
        "extract_fields": lambda row: (
            row.segments.date,
            None,  # user_id - you'll need to set this based on your logic
            row.customer.id,
            row.campaign.id,
            row.ad_group.id,
            getattr(row.metrics, 'clicks', None),
            getattr(row.metrics, 'impressions', None),
            getattr(row.metrics, 'ctr', None),
            getattr(row.metrics, 'interactions', None),
            getattr(row.metrics, 'interaction_rate', None),
            getattr(row.metrics, 'average_cpc', None),
            getattr(row.metrics, 'average_cpe', None),
            getattr(row.metrics, 'average_cpm', None),
            getattr(row.metrics, 'average_cpv', None),
            getattr(row.metrics, 'average_cost', None),
            getattr(row.metrics, 'all_conversions', None),
            getattr(row.metrics, 'all_conversions_value', None),
            getattr(row.metrics, 'cost_per_all_conversions', None),
            getattr(row.metrics, 'value_per_all_conversions', None),
            getattr(row.metrics, 'cost_micros', None),
            getattr(row.metrics, 'revenue_micros', None),
            getattr(row.metrics, 'view_through_conversions', None),
            getattr(row.metrics, 'video_quartile_p100_rate', None),
            getattr(row.metrics, 'video_quartile_p25_rate', None),
            getattr(row.metrics, 'video_quartile_p50_rate', None),
            getattr(row.metrics, 'video_quartile_p75_rate', None),
            getattr(row.metrics, 'video_view_rate', None),
            getattr(row.metrics, 'video_views', None),
            getattr(row.metrics, 'phone_calls', None),
            getattr(row.metrics, 'phone_impressions', None),
            getattr(row.metrics, 'phone_through_rate', None),
            getattr(row.metrics, 'search_absolute_top_impression_share', None),
            getattr(row.metrics, 'search_budget_lost_absolute_top_impression_share', None),
            getattr(row.metrics, 'search_budget_lost_top_impression_share', None),
            getattr(row.metrics, 'search_exact_match_impression_share', None),
            getattr(row.metrics, 'search_impression_share', None),
            getattr(row.metrics, 'search_rank_lost_absolute_top_impression_share', None),
            getattr(row.metrics, 'search_rank_lost_impression_share', None),
            getattr(row.metrics, 'search_rank_lost_top_impression_share', None),
            getattr(row.metrics, 'search_top_impression_share', None),
        )
    },
    {
        "name": "keyword_metrics",
        "query": """
            SELECT
              ad_group_criterion.criterion_id,
              ad_group.id,
              campaign.id,
              segments.date,
              customer.id,
              metrics.clicks,
              metrics.impressions,
              metrics.ctr,
              metrics.interactions,
              metrics.interaction_rate,
              metrics.average_cpc,
              metrics.average_cpe,
              metrics.average_cpm,
              metrics.average_cpv,
              metrics.average_cost,
              metrics.all_conversions,
              metrics.all_conversions_value,
              metrics.cost_per_all_conversions,
              metrics.value_per_all_conversions,
              metrics.cost_micros,
              metrics.revenue_micros,
              metrics.view_through_conversions,
              metrics.video_quartile_p100_rate,
              metrics.video_quartile_p25_rate,
              metrics.video_quartile_p50_rate,
              metrics.video_quartile_p75_rate,
              metrics.video_view_rate,
              metrics.video_views,
              metrics.search_absolute_top_impression_share,
              metrics.search_budget_lost_absolute_top_impression_share,
              metrics.search_budget_lost_top_impression_share,
              metrics.search_click_share,
              metrics.search_exact_match_impression_share,
              metrics.search_impression_share,
              metrics.search_rank_lost_absolute_top_impression_share,
              metrics.search_rank_lost_impression_share,
              metrics.search_rank_lost_top_impression_share,
              metrics.search_top_impression_share
            FROM ad_group_criterion
            WHERE segments.date DURING YESTERDAY
              AND ad_group_criterion.type = 'KEYWORD'
        """,
        "table": "keyword_metrics",
        "insert_sql": """
            INSERT INTO keyword_metrics (
              date, user_id, customer_id, campaign_id, adgroup_id, criterion_id, clicks, impressions, ctr,
              interactions, interaction_rate, average_cpc, average_cpa, average_cpm,
              average_cpv, average_cost, all_conversions, all_conversions_value,
              cost_per_all_conversions, value_per_all_conversions, cost, revenue,
              view_through_conversions, video_quartile_100_rate, video_quartile_25_rate,
              video_quartile_50_rate, video_quartile_75_rate, video_view_rate, video_views,
              search_absolute_top_impression_share, search_budget_lost_absolute_top_impression_share,
              search_budget_lost_top_impression_share, search_click_share,
              search_exact_match_impression_share, search_impression_share,
              search_rank_lost_absolute_top_impression_share, search_rank_lost_impression_share,
              search_rank_lost_top_impression_share, search_top_impression_share
            ) VALUES (
              %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,
              %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s
            )
            ON CONFLICT (customer_id, campaign_id, adgroup_id, criterion_id, date) DO UPDATE
            SET clicks = EXCLUDED.clicks,
                impressions = EXCLUDED.impressions,
                ctr = EXCLUDED.ctr,
                interactions = EXCLUDED.interactions,
                interaction_rate = EXCLUDED.interaction_rate,
                average_cpc = EXCLUDED.average_cpc,
                average_cpa = EXCLUDED.average_cpa,
                average_cpm = EXCLUDED.average_cpm,
                average_cpv = EXCLUDED.average_cpv,
                average_cost = EXCLUDED.average_cost,
                all_conversions = EXCLUDED.all_conversions,
                all_conversions_value = EXCLUDED.all_conversions_value,
                cost_per_all_conversions = EXCLUDED.cost_per_all_conversions,
                value_per_all_conversions = EXCLUDED.value_per_all_conversions,
                cost = EXCLUDED.cost,
                revenue = EXCLUDED.revenue,
                view_through_conversions = EXCLUDED.view_through_conversions,
                video_quartile_100_rate = EXCLUDED.video_quartile_100_rate,
                video_quartile_25_rate = EXCLUDED.video_quartile_25_rate,
                video_quartile_50_rate = EXCLUDED.video_quartile_50_rate,
                video_quartile_75_rate = EXCLUDED.video_quartile_75_rate,
                video_view_rate = EXCLUDED.video_view_rate,
                video_views = EXCLUDED.video_views,
                search_absolute_top_impression_share = EXCLUDED.search_absolute_top_impression_share,
                search_budget_lost_absolute_top_impression_share = EXCLUDED.search_budget_lost_absolute_top_impression_share,
                search_budget_lost_top_impression_share = EXCLUDED.search_budget_lost_top_impression_share,
                search_click_share = EXCLUDED.search_click_share,
                search_exact_match_impression_share = EXCLUDED.search_exact_match_impression_share,
                search_impression_share = EXCLUDED.search_impression_share,
                search_rank_lost_absolute_top_impression_share = EXCLUDED.search_rank_lost_absolute_top_impression_share,
                search_rank_lost_impression_share = EXCLUDED.search_rank_lost_impression_share,
                search_rank_lost_top_impression_share = EXCLUDED.search_rank_lost_top_impression_share,
                search_top_impression_share = EXCLUDED.search_top_impression_share;
        """,
        "extract_fields": lambda row: (
            row.segments.date,
            None,  # user_id - you'll need to set this based on your logic
            row.customer.id,
            row.campaign.id,
            row.ad_group.id,
            row.ad_group_criterion.criterion_id,
            getattr(row.metrics, 'clicks', None),
            getattr(row.metrics, 'impressions', None),
            getattr(row.metrics, 'ctr', None),
            getattr(row.metrics, 'interactions', None),
            getattr(row.metrics, 'interaction_rate', None),
            getattr(row.metrics, 'average_cpc', None),
            getattr(row.metrics, 'average_cpe', None),
            getattr(row.metrics, 'average_cpm', None),
            getattr(row.metrics, 'average_cpv', None),
            getattr(row.metrics, 'average_cost', None),
            getattr(row.metrics, 'all_conversions', None),
            getattr(row.metrics, 'all_conversions_value', None),
            getattr(row.metrics, 'cost_per_all_conversions', None),
            getattr(row.metrics, 'value_per_all_conversions', None),
            getattr(row.metrics, 'cost_micros', None),
            getattr(row.metrics, 'revenue_micros', None),
            getattr(row.metrics, 'view_through_conversions', None),
            getattr(row.metrics, 'video_quartile_p100_rate', None),
            getattr(row.metrics, 'video_quartile_p25_rate', None),
            getattr(row.metrics, 'video_quartile_p50_rate', None),
            getattr(row.metrics, 'video_quartile_p75_rate', None),
            getattr(row.metrics, 'video_view_rate', None),
            getattr(row.metrics, 'video_views', None),
            getattr(row.metrics, 'search_absolute_top_impression_share', None),
            getattr(row.metrics, 'search_budget_lost_absolute_top_impression_share', None),
            getattr(row.metrics, 'search_budget_lost_top_impression_share', None),
            getattr(row.metrics, 'search_click_share', None),
            getattr(row.metrics, 'search_exact_match_impression_share', None),
            getattr(row.metrics, 'search_impression_share', None),
            getattr(row.metrics, 'search_rank_lost_absolute_top_impression_share', None),
            getattr(row.metrics, 'search_rank_lost_impression_share', None),
            getattr(row.metrics, 'search_rank_lost_top_impression_share', None),
            getattr(row.metrics, 'search_top_impression_share', None),
        )
    }
]

#--------------------
#
# Entity Attributes
#
#--------------------
ATTR_ENTITIES = [
    {
        "name": "account_attr",
        "query": """
            SELECT
              customer.id,
              customer.descriptive_name,
              customer.manager,
              customer.currency_code,
              customer.time_zone,
              customer.call_reporting_setting.call_reporting_enabled,
              customer.call_reporting_setting.call_conversion_reporting_enabled,
              customer.conversion_tracking_setting.conversion_tracking_id,
              customer.conversion_tracking_setting.conversion_tracking_status,
              customer.remarketing_setting.google_global_site_tag
            FROM customer
        """,
        "table": "account_attr",
        "update_sql": """
            UPDATE account_attr 
            SET account_name = %s,
                manager = %s,
                currency_code = %s,
                time_zone = %s,
                call_reporting_enabled = %s,
                call_conversion_reporting_enabled = %s,
                conversion_tracking_id = %s,
                conversion_tracking_status = %s,
                remarketing_tag = %s
            WHERE customer_id = %s AND user_id = %s
        """,
        "extract_fields": lambda row: (
            getattr(row.customer, 'descriptive_name', None),
            getattr(row.customer, 'manager', None),
            getattr(row.customer, 'currency_code', None),
            getattr(row.customer, 'time_zone', None),
            getattr(row.customer.call_reporting_setting, 'call_reporting_enabled', None) if hasattr(row.customer, 'call_reporting_setting') else None,
            getattr(row.customer.call_reporting_setting, 'call_conversion_reporting_enabled', None) if hasattr(row.customer, 'call_reporting_setting') else None,
            getattr(row.customer.conversion_tracking_setting, 'conversion_tracking_id', None) if hasattr(row.customer, 'conversion_tracking_setting') else None,
            getattr(row.customer.conversion_tracking_setting, 'conversion_tracking_status', None) if hasattr(row.customer, 'conversion_tracking_setting') else None,
            getattr(row.customer.remarketing_setting, 'google_global_site_tag', None) if hasattr(row.customer, 'remarketing_setting') else None,
            row.customer.id,  # customer_id for WHERE clause
            None,  # user_id for WHERE clause - you'll need to set this
        )
    },
    {
        "name": "campaign_attr",
        "query": """
            SELECT
              campaign.id,
              campaign.name,
              campaign.status,
              campaign.campaign_budget,
              campaign.advertising_channel_type,
              campaign.bidding_strategy_type,
              campaign.manual_cpc.enhanced_cpc_enabled,
              campaign.target_roas.target_roas,
              campaign.target_cpa.target_cpa_micros,
              campaign.network_settings.target_content_network,
              campaign.network_settings.target_google_search,
              campaign.network_settings.target_partner_search_network,
              campaign.network_settings.target_search_network,
              campaign.network_settings.target_youtube,
              campaign.manual_cpc.cpc_bid_ceiling_micros,
              campaign.optimization_score,
              campaign.start_date,
              campaign.end_date,
              customer.id
            FROM campaign
        """,
        "table": "campaign_attr",
        "update_sql": """
            UPDATE campaign_attr 
            SET name = %s,
                status = %s,
                budget_resource_name = %s,
                type = %s,
                enhanced_cpc_enabled = %s,
                target_roas = %s,
                target_cpa = %s,
                target_content_network = %s,
                target_google_search = %s,
                target_partner_search_network = %s,
                target_search_network = %s,
                target_youtube = %s,
                cpc_bid_ceiling = %s,
                optimization_score = %s,
                start_date = %s,
                end_date = %s
            WHERE customer_id = %s AND campaign_id = %s AND user_id = %s
        """,
        "extract_fields": lambda row: (
            getattr(row.campaign, 'name', None),
            getattr(row.campaign, 'status', None),
            getattr(row.campaign, 'campaign_budget', None),
            getattr(row.campaign, 'advertising_channel_type', None),
            getattr(row.campaign.manual_cpc, 'enhanced_cpc_enabled', None) if hasattr(row.campaign, 'manual_cpc') else None,
            getattr(row.campaign.target_roas, 'target_roas', None) if hasattr(row.campaign, 'target_roas') else None,
            getattr(row.campaign.target_cpa, 'target_cpa_micros', None) if hasattr(row.campaign, 'target_cpa') else None,
            getattr(row.campaign.network_settings, 'target_content_network', None) if hasattr(row.campaign, 'network_settings') else None,
            getattr(row.campaign.network_settings, 'target_google_search', None) if hasattr(row.campaign, 'network_settings') else None,
            getattr(row.campaign.network_settings, 'target_partner_search_network', None) if hasattr(row.campaign, 'network_settings') else None,
            getattr(row.campaign.network_settings, 'target_search_network', None) if hasattr(row.campaign, 'network_settings') else None,
            getattr(row.campaign.network_settings, 'target_youtube', None) if hasattr(row.campaign, 'network_settings') else None,
            getattr(row.campaign.manual_cpc, 'cpc_bid_ceiling_micros', None) if hasattr(row.campaign, 'manual_cpc') else None,
            getattr(row.campaign, 'optimization_score', None),
            getattr(row.campaign, 'start_date', None),
            getattr(row.campaign, 'end_date', None),
            row.customer.id,  # customer_id for WHERE clause
            row.campaign.id,  # campaign_id for WHERE clause
            None,  # user_id for WHERE clause - you'll need to set this
        )
    },
    {
        "name": "adgroup_attr",
        "query": """
            SELECT
              ad_group.id,
              ad_group.name,
              ad_group.status,
              ad_group.type,
              ad_group.cpc_bid_micros,
              ad_group.cpm_bid_micros,
              ad_group.cpv_bid_micros,
              ad_group.target_cpa_micros,
              ad_group.target_cpm_micros,
              ad_group.target_cpv_micros,
              campaign.id,
              customer.id
            FROM ad_group
        """,
        "table": "adgroup_attr",
        "update_sql": """
            UPDATE adgroup_attr 
            SET name = %s,
                status = %s,
                type = %s,
                cpc_bid = %s,
                cpm_bid = %s,
                cpv_bid = %s,
                target_cpc = %s,
                target_cpm = %s,
                target_cpv = %s
            WHERE customer_id = %s AND campaign_id = %s AND adgroup_id = %s AND user_id = %s
        """,
        "extract_fields": lambda row: (
            getattr(row.ad_group, 'name', None),
            getattr(row.ad_group, 'status', None),
            getattr(row.ad_group, 'type', None),
            getattr(row.ad_group, 'cpc_bid_micros', None),
            getattr(row.ad_group, 'cpm_bid_micros', None),
            getattr(row.ad_group, 'cpv_bid_micros', None),
            getattr(row.ad_group, 'target_cpa_micros', None),
            getattr(row.ad_group, 'target_cpm_micros', None),
            getattr(row.ad_group, 'target_cpv_micros', None),
            row.customer.id,  # customer_id for WHERE clause
            row.campaign.id,  # campaign_id for WHERE clause
            row.ad_group.id,  # adgroup_id for WHERE clause
            None,  # user_id for WHERE clause - you'll need to set this
        )
    },
    {
        "name": "keyword_attr",
        "query": """
            SELECT
              ad_group_criterion.criterion_id,
              ad_group_criterion.status,
              ad_group_criterion.type,
              ad_group_criterion.bid_modifier,
              ad_group_criterion.cpc_bid_micros,
              ad_group_criterion.keyword.text,
              ad_group_criterion.keyword.match_type,
              ad_group.id,
              campaign.id,
              customer.id
            FROM ad_group_criterion
            WHERE ad_group_criterion.type = 'KEYWORD'
        """,
        "table": "keyword_attr",
        "update_sql": """
            UPDATE keyword_attr 
            SET status = %s,
                type = %s,
                bid_modifier = %s,
                cpc_bid = %s,
                keyword_text = %s,
                match_type = %s
            WHERE customer_id = %s AND campaign_id = %s AND adgroup_id = %s AND keyword_id = %s AND user_id = %s
        """,
        "extract_fields": lambda row: (
            getattr(row.ad_group_criterion, 'status', None),
            getattr(row.ad_group_criterion, 'type', None),
            getattr(row.ad_group_criterion, 'bid_modifier', None),
            getattr(row.ad_group_criterion, 'cpc_bid_micros', None),
            getattr(row.ad_group_criterion.keyword, 'text', None) if hasattr(row.ad_group_criterion, 'keyword') else None,
            getattr(row.ad_group_criterion.keyword, 'match_type', None) if hasattr(row.ad_group_criterion, 'keyword') else None,
            row.customer.id,  # customer_id for WHERE clause
            row.campaign.id,  # campaign_id for WHERE clause
            row.ad_group.id,  # adgroup_id for WHERE clause
            row.ad_group_criterion.criterion_id,  # keyword_id for WHERE clause
            None,  # user_id for WHERE clause - you'll need to set this
        )
    },
    {
        "name": "ad_attr",
        "query": """
            SELECT
              ad_group_ad.ad.id,
              ad_group_ad.status,
              ad_group_ad.ad.type,
              ad_group_ad.ad.device_preference,
              ad_group_ad.ad.display_url,
              ad_group_ad.ad.final_mobile_urls,
              ad_group_ad.ad.final_urls,
              ad_group_ad.ad.expanded_text_ad.headline_part1,
              ad_group_ad.ad.expanded_text_ad.headline_part2,
              ad_group_ad.ad.expanded_text_ad.headline_part3,
              ad_group_ad.ad.expanded_text_ad.description,
              ad_group_ad.ad.expanded_text_ad.description2,
              ad_group_ad.ad.expanded_text_ad.path1,
              ad_group_ad.ad.expanded_text_ad.path2,
              ad_group_ad.ad.responsive_search_ad.headlines,
              ad_group_ad.ad.responsive_search_ad.descriptions,
              ad_group_ad.ad.responsive_search_ad.path1,
              ad_group_ad.ad.responsive_search_ad.path2,
              ad_group.id,
              campaign.id,
              customer.id
            FROM ad_group_ad
        """,
        "table": "ad_attr",
        "update_sql": """
            UPDATE ad_attr 
            SET status = %s,
                type = %s,
                device_preference = %s,
                display_url = %s,
                final_mobile_urls = %s,
                final_urls = %s,
                expanded_text_ad_headline_part1 = %s,
                expanded_text_ad_headline_part2 = %s,
                expanded_text_ad_headline_part3 = %s,
                expanded_text_ad_description1 = %s,
                expanded_text_ad_description2 = %s,
                expanded_text_ad_path1 = %s,
                expanded_text_ad_path2 = %s,
                responsive_search_ad_headlines = %s,
                responsive_search_ad_descriptions = %s,
                responsive_search_ad_path_1 = %s,
                responsive_search_ad_path_2 = %s
            WHERE customer_id = %s AND campaign_id = %s AND adgroup_id = %s AND ad_id = %s AND user_id = %s
        """,
        "extract_fields": lambda row: (
            getattr(row.ad_group_ad, 'status', None),
            getattr(row.ad_group_ad.ad, 'type', None),
            getattr(row.ad_group_ad.ad, 'device_preference', None),
            getattr(row.ad_group_ad.ad, 'display_url', None),
            getattr(row.ad_group_ad.ad, 'final_mobile_urls', None),
            getattr(row.ad_group_ad.ad, 'final_urls', None),
            getattr(row.ad_group_ad.ad.expanded_text_ad, 'headline_part1', None) if hasattr(row.ad_group_ad.ad, 'expanded_text_ad') else None,
            getattr(row.ad_group_ad.ad.expanded_text_ad, 'headline_part2', None) if hasattr(row.ad_group_ad.ad, 'expanded_text_ad') else None,
            getattr(row.ad_group_ad.ad.expanded_text_ad, 'headline_part3', None) if hasattr(row.ad_group_ad.ad, 'expanded_text_ad') else None,
            getattr(row.ad_group_ad.ad.expanded_text_ad, 'description', None) if hasattr(row.ad_group_ad.ad, 'expanded_text_ad') else None,
            getattr(row.ad_group_ad.ad.expanded_text_ad, 'description2', None) if hasattr(row.ad_group_ad.ad, 'expanded_text_ad') else None,
            getattr(row.ad_group_ad.ad.expanded_text_ad, 'path1', None) if hasattr(row.ad_group_ad.ad, 'expanded_text_ad') else None,
            getattr(row.ad_group_ad.ad.expanded_text_ad, 'path2', None) if hasattr(row.ad_group_ad.ad, 'expanded_text_ad') else None,
            getattr(row.ad_group_ad.ad.responsive_search_ad, 'headlines', None) if hasattr(row.ad_group_ad.ad, 'responsive_search_ad') else None,
            getattr(row.ad_group_ad.ad.responsive_search_ad, 'descriptions', None) if hasattr(row.ad_group_ad.ad, 'responsive_search_ad') else None,
            getattr(row.ad_group_ad.ad.responsive_search_ad, 'path1', None) if hasattr(row.ad_group_ad.ad, 'responsive_search_ad') else None,
            getattr(row.ad_group_ad.ad.responsive_search_ad, 'path2', None) if hasattr(row.ad_group_ad.ad, 'responsive_search_ad') else None,
            row.customer.id,  # customer_id for WHERE clause
            row.campaign.id,  # campaign_id for WHERE clause
            row.ad_group.id,  # adgroup_id for WHERE clause
            row.ad_group_ad.ad.id,  # ad_id for WHERE clause
            None,  # user_id for WHERE clause - you'll need to set this
        )
    }
]
